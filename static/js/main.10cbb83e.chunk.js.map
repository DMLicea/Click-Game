{"version":3,"sources":["components/Card/card.js","components/Container/container.js","components/Container/index.js","components/Footer/footer.js","components/Header/header.js","components/Navbar/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","imageClick","src","image","alt","id","Container","children","Footer","Header","navbar","this","score","Component","App","state","cat","clickedCat","event","currentCat","target","console","log","_this","indexOf","setState","sort","b","Math","random","alert","concat","_this2","components_Navbar_navbar","Header_header","components_Container","map","Card_card","key","Footer_footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"swBAqBeA,SAlBF,SAAAC,GAAK,OAEdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAASL,EAAMM,YAEnCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,OAGAI,IAAKP,EAAMQ,MACXC,IAAKT,EAAMU,eCJJC,ICPAA,EDCf,SAAmBX,GAEf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMY,WEO5BC,SATA,kBAEdZ,EAAAC,EAAAC,cAAA,UAAQC,UAAY,UAEnBH,EAAAC,EAAAC,cAAA,+BCQaW,SAZA,kBAEfb,EAAAC,EAAAC,cAAA,UAAQC,UAAY,UAEpBH,EAAAC,EAAAC,cAAA,8BAEAF,EAAAC,EAAAC,cAAA,kJCaeY,0LAhBP,OAERd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCAAyCM,GAAG,UAElDT,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,oBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAEdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,UAA8BY,KAAKhB,MAAMiB,gBAX9BC,qBC0HNC,oNA/GbC,MAAQ,CAENC,MAEAC,WAAY,GAEZL,MAAO,KAKXX,WAAa,SAAAiB,GAET,IAAMC,EAAaD,EAAME,OAAOhB,IAChCiB,QAAQC,IAAIJ,EAAME,OAAOhB,KACCmB,EAAKR,MAAME,WAAWO,QAAQL,IAAe,GAMrEI,EAAKE,SAAS,CAEZT,IAAKO,EAAKR,MAAMC,IAAIU,KAAK,SAAS7B,EAAG8B,GAAI,MAAO,GAAMC,KAAKC,WAE3DZ,WAAY,GAEZL,MAAO,IAIPkB,MAAM,oBAMRP,EAAKE,SAAS,CAEVT,IAAKO,EAAKR,MAAMC,IAAIU,KAAK,SAAS7B,EAAG8B,GAAI,MAAO,GAAMC,KAAKC,WAE3DZ,WAAYM,EAAKR,MAAME,WAAWc,OAAOZ,GAEzCP,MAAOW,EAAKR,MAAMH,MAAQ,GAM5B,WAC2B,KAArBW,EAAKR,MAAMH,QAEbkB,MAAM,YAENP,EAAKE,SAAS,CAEZT,IAAKO,EAAKR,MAAMC,IAAIU,KAAK,SAAS7B,EAAG8B,GAAI,MAAO,GAAMC,KAAKC,WAE3DZ,WAAY,GAEZL,MAAO,gFAgBV,IAAAoB,EAAArB,KAET,OAEEf,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACmC,EAAD,CAEArB,MAAOD,KAAKI,MAAMH,QAIlBhB,EAAAC,EAAAC,cAACoC,EAAD,MAEAtC,EAAAC,EAAAC,cAACqC,EAAD,KAEKxB,KAAKI,MAAMC,IAAIoB,IAAI,SAAApB,GAAG,OACrBpB,EAAAC,EAAAC,cAACuC,EAAD,CACEpC,WAAY+B,EAAK/B,WACjBI,GAAIW,EAAIX,GACRiC,IAAKtB,EAAIX,GACTF,MAAOa,EAAIb,WAMnBP,EAAAC,EAAAC,cAACyC,EAAD,cA5GY1B,cCGE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.10cbb83e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\n\nconst Card = props => (\n\n    <div className=\"card\" onClick={props.imageClick}>\n\n      <div className=\"img\">\n\n        <img \n        \n         \n        src={props.image} \n        alt={props.id}/>\n        \n      </div>\n\n    </div>\n    \n  );\n\nexport default Card;\n","import React from \"react\";\nimport \"./container.css\";\n\nfunction Container(props) {\n\n    return <div className=\"wrapper\">{props.children}</div>;\n\n}\n\nexport default Container;\n","import Container from './container';\n\nexport default Container;","import React from \"react\";\nimport \"./footer.css\";\n\nconst Footer = () => (\n\t\n\t<footer className = \"footer\">\n\n\t\t<p>Click Game 2019</p>\n\n\t</footer>\n);\n\nexport default Footer;","import React from \"react\";\nimport \"./header.css\";\n\nconst Header = () => (\n\n<header className = \"header\">\n\n<h1>Click The Kitty!</h1>\n\n<h3>Click A Cat, Earn A Point! Click all the cats one time to win, but be careful! If you click any of them more than once, you lose!</h3>\n\n</header>\n\n);\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\n\nclass navbar extends Component {\n    render() {\n\n        return (\n\n<nav className=\"navbar navbar-default navbar-fixed-top\" id=\"catbar\">\n\n         <ul>\n          <li className=\"left\">Test Your Memory</li>\n          <li className=\"middle\"></li>\n         \n          <li className=\"right\">Score: {this.props.score}</li>\n        </ul>\n      </nav>\n\n);\n\n}}\n\nexport default navbar;\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Container from \"./components/Container\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport cat from \"./cat.json\";\nimport './App.css';\n\nclass App extends Component {\n\n\n// this.state.cat set to cat json array\n\n  state = {\n\n    cat,\n    \n    clickedCat: [],\n    \n    score: 0\n  \n  };\n\n\nimageClick = event => {\n\n    const currentCat = event.target.alt;\n    console.log(event.target.alt);\n    const CatAlreadyClicked = this.state.clickedCat.indexOf(currentCat) > -1;\n\n//if the cat is already clicked, reset\n\n    if (CatAlreadyClicked) {\n\n      this.setState({\n\n        cat: this.state.cat.sort(function(a, b) {return 0.5 - Math.random();}),\n\n        clickedCat: [],\n\n        score: 0\n\n      });\n\n        alert(\"Oops! You lost!\");\n\n//if not cards reshuffle and you get a point\n\n    } else {\n\n      this.setState({\n\n          cat: this.state.cat.sort(function(a, b) {return 0.5 - Math.random();}),\n\n          clickedCat: this.state.clickedCat.concat(currentCat),\n\n          score: this.state.score + 1\n\n        },\n\n//if all 12 clicked you get message and cards reset  \n\n        () => {\n          if (this.state.score === 12) {\n\n            alert(\"You Won!\");\n\n            this.setState({\n\n              cat: this.state.cat.sort(function(a, b) {return 0.5 - Math.random();}),\n              \n              clickedCat: [],\n              \n              score: 0\n\n            });\n\n          }\n\n        }\n\n      );\n\n    }\n\n  };\n\n  \n\n  render() {\n\n  return (\n\n    <div>\n\n      <Navbar \n      \n      score={this.state.score}\n      \n      />\n\n      <Header />\n\n      <Container>\n\n          {this.state.cat.map(cat => (\n            <Card\n              imageClick={this.imageClick}\n              id={cat.id}\n              key={cat.id}\n              image={cat.image}\n            />\n          ))}\n\n      </Container>\n\n      <Footer />\n\n    </div>\n  \n  );\n\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}